
package escala;

import java.util.Calendar;
import java.util.Locale;
import javax.swing.JOptionPane;

/**
 * Tela principal do programa. Nela estão as funções principais.
 * @author Dream
 */
public class TelaEscala extends javax.swing.JFrame {
        // Variáveis do sistema
    private javax.swing.JScrollPane[] pnBase = new javax.swing.JScrollPane[12];
    private PnCalendario[] pc = new PnCalendario[12];
    private String[][] textos = new String[4][18];
    ...
    
    /**
     * Método Construtor
     */
    public TelaEscala() {
            // Inicializando panels que receberão os calendários
        for(int i=0; i<12;i++){
            pnBase[i] = new javax.swing.JScrollPane();
        }
        preencheIdioma(); // Ajusta o idioma
        dadosIniciais(); // Coleta dados salvos
        initComponents(); // Cria o formulário
        mudaComponentes(); // Ajusta os componentes
    }
    
    /**
     * Método interno.
     * Usado para criar os 12 calendarios usados no programa.
     * Recebe 2 parametros informando quantos dias o usuário
     * trabalha e quantos ele folga.
     * @param trabalho
     * @param folga 
     */
    private void escala(int trabalho, int folga){
            // Setando variáveis
        Calendar embarque = Calendar.getInstance();
        Calendar desembarque = Calendar.getInstance();
        ...
        
            // Abrindo painéis
        java.awt.GridBagConstraints gridBag;
        int x = 0; // contador de linhas
        int y = 0; // contador de colunas
        for(int i = 0; i < 12; i++){
                // Instanciando e inserindo PnCalendario()
            pc[i] = new PnCalendario(this.idioma);
            pc[i].monta(inicio, embarque, desembarque, cbReuniao.isSelected(), trabalho, folga);
            pnBase[i].setSize(new java.awt.Dimension(170, 110));
            pnBase[i].setViewportView(pc[i]);
                // Organizando no panel
            gridBag = new java.awt.GridBagConstraints();
            ...
            pnGeral.add(pnBase[i], gridBag);
                // Organizando fileiras e colunas
            if(x == 3){
            x = 0;
            y++;
            }
                // Finalizando
            revalidate();
            repaint();
	}
        this.emb = embarque;// Usado no subtitulo da janela de impressão
    }
    
    /**
     * Método interno.
     * Pega os dados do arquivo salvo e insere nas variáveis do sistema
     */
    private void dadosIniciais(){
        java.io.File arquivo = new java.io.File("save.txt");
        try(java.io.FileReader fr = new java.io.FileReader(arquivo)){
                // Buscando dados salvos no sistema
            char[] c = new char[14];
            fr.read(c);
            System.out.println("Dado salvo: "+java.util.Arrays.toString(c));
                // Inserindo dado salvo no sistema
            int dia, mes, ano;
            ano = Integer.valueOf(String.valueOf(c, 0, 4));
            mes = Integer.valueOf(String.valueOf(c, 4, 2));
            dia = 
            ...
            this.data.set(ano, mes, dia);
            System.out.println("Data do save: "+this.data.getTime());
              // Tratamento de erros
        }catch(java.io.IOException ex){
            System.out.println("Arquivo Save não encontrado!");
            ex.printStackTrace();
        }catch(NumberFormatException nfe){
            System.out.println("Save corrompido!");
            JOptionPane.showMessageDialog(this, textos[this.idioma][5], textos[this.idioma][6], 0);
            Embarcado.reabrir();
            nfe.printStackTrace();
        }
    }
    
    /**
     * Método interno.
     * Muda os textos dos componentes de acordo com o idioma selecionado.
     * Usado também ao iniciar o programa para setar componentes.
     */
    private void mudaComponentes(){
        if(this.idioma == 0){ // Português
            btSalvar.setText("Salvar");
            btImprimir.setText("Imprimir");
            ...
            jcCalendario.setLocale(new Locale("pt", "BR"));
            escala(this.trab, this.folg);
        }
        if(this.idioma == 1){ // Inglês
            ...
        }
        if(this.idioma == 2){ // Espanhol
            ...
        }
        if(this.idioma == 3){ // Francês
            ...
        }
            // Muda o botão de idioma selecionado
        switch(this.idioma){
            case 0:
                tgBrasil.setSelected(true);
                break;
            ...
        }
            // Muda a escala selecionada
        if(this.trab == 14 && this.folg == 14){
            rd14.setSelected(true);
        }else if(this.trab == 28 && this.folg == 28){
            rd28.setSelected(true);
        }else{
            rdEditar.setSelected(true);
        }
            // Muda reunião e calendario de seleção
        cbReuniao.setSelected(this.reuniao);
        jcCalendario.setDate(this.data.getTime());
    }
    
    /**
     * Método interno.
     * Preenche o array de textos com as frases nos quatro idiomas.
     */
    private void preencheIdioma(){
            // Portugues
        textos[0][0] = "Escala de trabalho de ";
        textos[0][1] = " por ";
        textos[0][2] = "Primeiro embarque: ";
        textos[0][3] = " até ";
        ...
            // Ingles
        textos[1][0] = "Work Schedule, ";
        textos[1][1] = " by ";
        textos[1][2] = "First boarding: ";
        textos[1][3] = " until ";
        ...
            // Espanhol
        textos[2][0] = "Escala de trabajo, ";
        textos[2][1] = " por ";
        textos[2][2] = "Primer embarque: ";
        textos[2][3] = " hasta ";
        ...
            // Frances
        textos[3][0] = "Programme de travail, ";
        textos[3][1] = " par ";
        textos[3][2] = "Premier embarquement: ";
        textos[3][3] = " avant ";
        ...
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {
    ...
    }

    private void rd14ActionPerformed(java.awt.event.ActionEvent evt) {                                     
            // Escala 14 / 14
        this.trab = 14;
        this.folg = 14;
        escala(this.trab, this.folg);
    }                                    

    private void rd28ActionPerformed(java.awt.event.ActionEvent evt) {                                     
       ...
    }                                    

    private void rdEditarActionPerformed(java.awt.event.ActionEvent evt) {                                         
            // Escala personalizada
        try{
                // Pegar os valores digitados e testar se estão entre 1 e 99
            int t = Integer.parseInt(JOptionPane.showInputDialog(null, textos[this.idioma][7], textos[this.idioma][8], 3));
            int f = Integer.parseInt(JOptionPane.showInputDialog(null, textos[this.idioma][9], textos[this.idioma][8], 3));
            if(t > 0 && t < 100 && f > 0 && f < 100){
                this.trab = t;
                this.folg = f;
                escala(this.trab, this.folg);
            }else{
                    // Avisando que o número está fora do desejado
                JOptionPane.showMessageDialog(null, textos[this.idioma][10], textos[this.idioma][8], 0);
            }
        }catch(NumberFormatException nfe){
            System.out.println("Erro TelaEscala rdEditar: "+nfe);
            JOptionPane.showMessageDialog(null, textos[this.idioma][11], textos[this.idioma][8], 0);
        }
    }                                        

    private void jcCalendarioPropertyChange(java.beans.PropertyChangeEvent evt) {                                            
            // Gerando novos calendarios com o dia selecionado
        ...
    }                                           

    private void btFecharActionPerformed(java.awt.event.ActionEvent evt) {                                         
        dispose();
    }                                        

    private void cbReuniaoItemStateChanged(java.awt.event.ItemEvent evt) {                                           
            // Setando indicador de reunião
        ...
    }                                          

    private void btImprimirActionPerformed(java.awt.event.ActionEvent evt) {                                           
            // Abre janela de impressão
        java.text.SimpleDateFormat df = new java.text.SimpleDateFormat("dd/MM/yyyy");
        String tit = textos[this.idioma][0] + this.trab + textos[this.idioma][1] + this.folg;
        String sub = textos[this.idioma][2] + df.format(jcCalendario.getDate()) +
                        textos[this.idioma][3] + df.format(this.emb.getTime()) + textos[this.idioma][4];
        
        TelaImprimir ji = new TelaImprimir(tit, sub, this.pc);
        ji.setVisible(true);
        ji.imprimir();
        ji.dispose();
        escala(this.trab, this.folg); // Re-gerar escala pois estava dando erro no pnGeral
    }                                          

    private void btSalvarActionPerformed(java.awt.event.ActionEvent evt) {                                         
            // Coleta os dados e salva num arquivo texto
        java.io.File arquivo = new java.io.File("save.txt");
        try( java.io.FileWriter fw = new java.io.FileWriter(arquivo) ){
            this.data = jcCalendario.getCalendar(); // data selecionada
            
                // Adicionando ano a string
            String dt = String.valueOf(this.data.get(Calendar.YEAR)); 
            int tp = this.data.get(Calendar.MONTH);
                // Adicionando mês com 2 digitos a string
            if(tp < 10){
                dt += "0"+tp; 
            }
            ...
            JOptionPane.showMessageDialog(this, textos[this.idioma][12]+"\n"+textos[this.idioma][13]+
                    "\n"+textos[this.idioma][0]+this.trab+textos[this.idioma][1]+
                    this.folg+(cbReuniao.isSelected()?textos[this.idioma][14]:textos[this.idioma][15])+
                    textos[this.idioma][16], textos[this.idioma][17], 1);
        }catch(java.io.IOException ex){
        ex.printStackTrace();
        }
    }                                        

    private void tgBrasilActionPerformed(java.awt.event.ActionEvent evt) {                                         
            // Botão de seleção de idioma
        ...
    }                                        

    private void tgInglaterraActionPerformed(java.awt.event.ActionEvent evt) {                                             
            // Botão de seleção de idioma
        ...
    }                                            

    private void tgEspanhaActionPerformed(java.awt.event.ActionEvent evt) {                                          
            // Botão de seleção de idioma
        ...
    }                                         

    private void tgFrancaActionPerformed(java.awt.event.ActionEvent evt) {                                         
            // Botão de seleção de idioma
        ...
    }                                        

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TelaEscala.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TelaEscala.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TelaEscala.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TelaEscala.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TelaEscala().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JButton btFechar;
    private javax.swing.JButton btImprimir;
    ...
    // End of variables declaration                   
}
